/* 
--shadow-color is used as a parameter of the hsl function so that the shadow 
colour can be defined based on the background colour of where it is being used, 
but we can't rely on inheritance for functions that need to be re-calculated so 
the shadow custom properties with their hsl functions can't be defined on :root.

That’s because each property value is computed once per element, and then the 
computed value is inherited. By defining our function at the document root, we 
don’t make the entire function available to descendants — only the computed 
result of the function.

That makes sense if you frame it in terms of the cascading --shadow-color 
parameter. Like any inherited CSS property, it is available to descendants but 
not ancestors. The value we set on a nested element is not available to a 
function we defined on the html root ancestor. 

In order to make the hsl function re-calculate on any element, we can make it 
available to elements with a given selector.

.shadow { --shadow-sm: 0.5px 1px 1px hsl(var(--shadow-color) / 0.7); ...etc}

or make the function available to elements nested inside a given selector  
.shadow * { --shadow-sm: 0.5px 1px 1px hsl(var(--shadow-color) / 0.7); ...etc} 

or make the function available to siblings following a given selector 
.shadow ~ * { --shadow-sm: 0.5px 1px 1px hsl(var(--shadow-color) / 0.7); ...etc} 

source: https://www.smashingmagazine.com/2019/07/css-custom-properties-cascade/
*/
.shadow {
  --shadow-sm: 0.5px 1px 1px hsl(var(--shadow-color) / 0.7);
  --shadow-md: 1px 2px 2px hsl(var(--shadow-color) / 0.333),
    2px 4px 4px hsl(var(--shadow-color) / 0.333),
    3px 6px 6px hsl(var(--shadow-color) / 0.333);
  --shadow-lg: 1px 2px 2px hsl(var(--shadow-color) / 0.2),
    2px 4px 4px hsl(var(--shadow-color) / 0.2),
    4px 8px 8px hsl(var(--shadow-color) / 0.2),
    8px 16px 16px hsl(var(--shadow-color) / 0.2),
    16px 32px 32px hsl(var(--shadow-color) / 0.2);
}

:root {
  --blur-sm: blur(8px);
  --blur-md: blur(16px);
  --blur-lg: blur(24px);
  --blur-xl: blur(40px);

  --gradient-gray-600-conic: conic-gradient(
    from 259.08deg at 50% 50%,
    hsl(var(--gray-600)) 0deg,
    hsl(var(--gray-500)) 360deg
  );
  --gradient-gray-600-500-90deg: linear-gradient(
    90deg,
    hsl(var(--gray-600)) 0%,
    hsl(var(--gray-500)) 100%
  );
  --gradient-gray-700-600-45deg: linear-gradient(
    45deg,
    hsl(var(--gray-700)) 0%,
    hsl(var(--gray-600)) 100%
  );
  --gradient-gray-800-600-45deg: linear-gradient(
    45deg,
    hsl(var(--gray-800)) 0%,
    hsl(var(--gray-600)) 100%
  );
  --gradient-gray-800-600-90deg: linear-gradient(
    63.44deg,
    hsl(var(--gray-800)) 16.72%,
    hsl(var(--gray-600)) 83.39%
  );
  --gradient-gray-800-700-27deg: linear-gradient(
    26.57deg,
    hsl(var(--gray-800)) 8.33%,
    hsl(var(--gray-700)) 91.67%
  );
  --gradient-gray-900-600-45deg: linear-gradient(
    45deg,
    hsl(var(--gray-900)) 0%,
    hsl(var(--gray-600)) 100%
  );

  --gradient-primary-600-conic: conic-gradient(
    from 259.08deg at 50% 50%,
    hsl(var(--primary-600)) 0deg,
    hsl(var(--primary-500)) 360deg
  );
  --gradient-primary-600-500-90deg: linear-gradient(
    90deg,
    hsl(var(--primary-600)) 0%,
    hsl(var(--primary-500)) 100%
  );
  --gradient-primary-700-600-45deg: linear-gradient(
    45deg,
    hsl(var(--primary-700)) 0%,
    hsl(var(--primary-600)) 100%
  );
  --gradient-primary-800-600-45deg: linear-gradient(
    45deg,
    hsl(var(--primary-800)) 0%,
    hsl(var(--primary-600)) 100%
  );
  --gradient-primary-800-600-90deg: linear-gradient(
    63.44deg,
    hsl(var(--primary-800)) 16.72%,
    hsl(var(--primary-600)) 83.39%
  );
  --gradient-primary-800-700-27deg: linear-gradient(
    26.57deg,
    hsl(var(--primary-800)) 8.33%,
    hsl(var(--primary-700)) 91.67%
  );
  --gradient-primary-900-600-45deg: linear-gradient(
    45deg,
    hsl(var(--primary-900)) 0%,
    hsl(var(--primary-600)) 100%
  );
}

@media (prefers-reduced-motion: no-preference) {
  html {
    scroll-behavior: smooth;
  }
}

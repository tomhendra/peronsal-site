---
// import { useTranslations } from '../utils/translations'
import Select from './Select.astro'
// import type { Props } from '../props'

// const t = useTranslations(Astro.props.locale)
---

<theme-select>
  {
    /* TODO: Can we give this select a width that works well for each language’s strings? */
  }
  <Select
    icon="laptop"
    label="themeSelect.accessibleLabel"
    value="system"
    options={[
      { label: 'themeSelect.dark', selected: false, value: 'dark' },
      { label: 'themeSelect.light', selected: false, value: 'light' },
      { label: 'themeSelect.system', selected: true, value: 'system' },
    ]}
    width="6.25em"
  />
</theme-select>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  ThemeProvider.updatePickers()
</script>

<script>
  type Theme = 'system' | 'dark' | 'light'

  class ThemeSelect extends HTMLElement {
    /** Key in `localStorage` to store color theme preference at. */
    #key = 'theme'

    constructor() {
      super()
      this.#onThemeChange(this.#loadTheme())
      const select = this.querySelector('select')
      if (select) {
        select.addEventListener('change', (e) => {
          if (e.currentTarget instanceof HTMLSelectElement) {
            this.#onThemeChange(this.#parseTheme(e.currentTarget.value))
          }
        })
      }
    }

    /** Get a typesafe theme string from any JS value (unknown values are coerced to `'system'`). */
    #parseTheme(theme: unknown): Theme {
      if (theme === 'system' || theme === 'dark' || theme === 'light') {
        return theme
      } else {
        return 'system'
      }
    }

    /** Get the preferred system color scheme. */
    #getPreferredColorScheme(): Theme {
      return matchMedia('(prefers-color-scheme: light)').matches
        ? 'light'
        : 'dark'
    }

    /** Update select menu UI, document theme, and local storage state. */
    #onThemeChange(theme: Theme): void {
      ThemeProvider.updatePickers(theme)
      document.documentElement.dataset.theme =
        theme === 'system' ? this.#getPreferredColorScheme() : theme
      this.#storeTheme(theme)
    }

    /** Store the user’s preference in `localStorage`. */
    #storeTheme(theme: Theme): void {
      if (typeof localStorage !== 'undefined') {
        if (theme === 'light' || theme === 'dark') {
          localStorage.setItem(this.#key, theme)
        } else {
          localStorage.removeItem(this.#key)
        }
      }
    }

    /** Load the user’s preference from `localStorage`. */
    #loadTheme(): Theme {
      const theme =
        typeof localStorage !== 'undefined' && localStorage.getItem(this.#key)
      return this.#parseTheme(theme)
    }
  }

  customElements.define('theme-select', ThemeSelect)
</script>
